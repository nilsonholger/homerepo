#! /usr/bin/env bash
#
# Copyright (C) 2012 nilsonholger (a) hyve (.) org
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.



# setup
_CONFDIR="$HOME/.config/homerepo"
if [ ! -d $_CONFDIR ]
then
	mkdir $_CONFDIR
	cat << EOF > $_CONFDIR/config
# HOMEREPO CONFIG

# base directory of repositories you want homerepo to manage
_SRCDIR="\$HOME/local/homerepo"

# update order, if none is found, all subdirectories of \$_SRCDIR will be
# updated in alphabetical order
#
# format (empty lines are possible, NOTHING else, no comments etc.):
# directory1
# directory2
# ...
_UPDATE_ORDER="\$HOME/.config/homerepo/order"

# log file location
_LOGFILE="\$HOME/.cache/homerepo.log"
EOF
echo "Please update the config file in $_CONFDIR/config"
exit
else
	source $_CONFDIR/config
fi



# internal
_BUILD_FAILED=''
_INDEX=0
_SCM=''
_ORDER=''
_TEST="/tmp/homerepo"
_UPDATE=''



# colors
_RED_B='\e[1;31m'
_GREEN='\e[0;32m'
_YELLOW_B='\e[1;33m'



# append to buffer
function out_buffer {
((_INDEX++))
_BUFFER[$_INDEX]="$2$1\e[0m"
echo -e "$2$1\e[0m" | tee -a $_LOGFILE
}



# prepend something to output
function add_prefix {
while read line
do
	echo $1: $line | tee -a $_LOGFILE
done
}



# list of directories to check for updates
function update_list {
[ -r $_UPDATE_ORDER ] && _ORDER=`cat $_UPDATE_ORDER` || _ORDER=`ls $_SRCDIR`
#eval "_ORDER=($_ORDER)"
}



# git (o how i adore thee)
function update_git {
_SCM='GIT'
echo "GIT STATUS" | add_prefix $1
git pull 2>&1 | tee $_TEST | add_prefix $1
grep -q -E "(Already up-to-date|Current branch .* is up to date)" $_TEST \
	&& _UPDATE='' || _UPDATE=true
}



# mercurial (o how i neglect thee)
function update_mercurial {
_SCM='MERCURIAL'
echo "MERCURIAL STATUS" | add_prefix $1
hg pull | tee $_TEST | add_prefix $1
grep -q "no changes found" $_TEST && _UPDATE='' || _UPDATE=true
}



# subversion (o how i hate thee)
function update_subversion {
_SCM='SUBVERSION'
echo "SUBVERSION STATUS" | add_prefix $1
svn update | tee $_TEST | add_prefix $1
grep -q "At revision" $_TEST && _UPDATE='' || _UPDATE=true
}



# cvs (o how i despise thee)
function update_cvs {
_SCM='CVS'
echo "CVS STATUS" | add_prefix $1
cvs update 2>/dev/null | tee $_TEST | add_prefix $1
grep -q -E "^P " $_TEST && _UPDATE=true || _UPDATE=''
}



# upgrade all from _ORDER
function upgrade_list {
echo "`date`" > $_LOGFILE
for _DIR in $*
do
	cd $_SRCDIR
	[ -d $_DIR ] || out_buffer "!!! $_DIR [NOT FOUND]" "$_RED_B"
	[ -d $_DIR ] || continue
	cd $_DIR
	_SCM=''
	_BUILD_FAILED=''
	[ -d .git ] && update_git $_DIR
	[ -d .hg ] && update_mercurial $_DIR
	[ -d .svn ] && update_subversion $_DIR
	[ -d CVS ] && update_cvs $_DIR
	[ ! $_SCM ] && out_buffer "--- $_DIR [NO_SCM]" && continue
	[ ! $_UPDATE ] && out_buffer "=== $_DIR [$_SCM]" "$_GREEN" && continue
	out_buffer "+++ $_DIR [$_SCM]" "$_YELLOW_B"
	[ -r build/Makefile ] && cd build
	[ -r Makefile ] && make | add_prefix $_DIR
	[ -r Makefile ] && make > /dev/null || _BUILD_FAILED=true
	[ ! $_BUILD_FAILED ] && make install | add_prefix $_DIR
	[ $_BUILD_FAILED ] && out_buffer "XXX $_DIR [$_SCM] BUILD FAILED" "$_RED_B"
done

echo
echo >> $_LOGFILE

for (( i = 1; i<= $_INDEX; i++ ))
do
	echo -e ${_BUFFER[$i]}
	echo ${_BUFFER[$i]} >> $_LOGFILE
done
}



# main switch
case $1 in
	list)
		update_list
		echo $_ORDER
		;;
	upgrade)
		update_list
		[ -z $2 ] && upgrade_list $_ORDER || (shift && upgrade_list $*)
		;;
	help|*)
		cat << EOF
usage: $0 <command>

	list                            list update order of repositories
	upgrade [<repo1> [<repo...>]]   upgrade given (or all) repositories
	help                            guess what you're looking at...
EOF
esac



# cleanup
[ -r $_TEST ] && rm $_TEST
